{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "017edd8c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import os\n",
    "\n",
    "# Read the input Excel file\n",
    "input_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\Input.xlsx'\n",
    "df = pd.read_excel(input_file_path)\n",
    "\n",
    "# Create a directory to save the extracted article texts\n",
    "output_directory = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "os.makedirs(output_directory, exist_ok=True)\n",
    "\n",
    "# Function to extract article title and text from URL\n",
    "def extract_article_info(url):\n",
    "    try:\n",
    "        response = requests.get(url)\n",
    "        if response.status_code == 200:\n",
    "            soup = BeautifulSoup(response.content, 'html.parser')\n",
    "            # Extract article title\n",
    "            article_title = soup.find(class_=\"entry-title\").get_text()\n",
    "            # Extract article text\n",
    "            article_text = soup.find(class_=\"td-post-content\").get_text()\n",
    "            return article_title, article_text\n",
    "        else:\n",
    "            print(f\"Failed to fetch {url}. Status code: {response.status_code}\")\n",
    "            return None, None\n",
    "    except Exception as e:\n",
    "        print(f\"An error occurred while fetching {url}: {e}\")\n",
    "        return None, None\n",
    "\n",
    "# Iterate over rows in the DataFrame\n",
    "for index, row in df.iterrows():\n",
    "    url_id = row['URL_ID']\n",
    "    url = row['URL']\n",
    "    print(f\"Processing URL_ID: {url_id}\")\n",
    "    \n",
    "    # Extract article title and text\n",
    "    article_title, article_text = extract_article_info(url)\n",
    "    \n",
    "    if article_title and article_text:\n",
    "        # Save the article title and text to a text file\n",
    "        output_file_path = os.path.join(output_directory, f\"{url_id}.txt\")\n",
    "        with open(output_file_path, 'w', encoding='utf-8') as f:\n",
    "            f.write(article_title + '\\n\\n')\n",
    "            f.write(article_text)\n",
    "        print(f\"Article title and text saved to {output_file_path}\")\n",
    "    else:\n",
    "        print(\"Failed to extract article title and text.\")\n",
    "\n",
    "print(\"Extraction complete.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "89df8e92",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize\n",
    "from collections import defaultdict\n",
    "\n",
    "# Set the path to stop words and master dictionary directories\n",
    "stop_words_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\StopWords-20240311T041135Z-001\\StopWords'\n",
    "master_dict_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\MasterDictionary-20240311T041108Z-001\\MasterDictionary'\n",
    "\n",
    "# Function to read stop words from files\n",
    "def read_stop_words(directory):\n",
    "    stop_words = set()\n",
    "    for filename in os.listdir(directory):\n",
    "        with open(os.path.join(directory, filename), 'r', encoding='latin-1') as file:\n",
    "            stop_words.update(file.read().splitlines())\n",
    "    return stop_words\n",
    "# Function to read positive and negative words from files\n",
    "def read_master_dict(directory):\n",
    "    positive_words = set()\n",
    "    negative_words = set()\n",
    "    with open(os.path.join(directory, 'positive-words.txt'), 'r', encoding='latin-1') as file:\n",
    "        positive_words.update(file.read().splitlines())\n",
    "    with open(os.path.join(directory, 'negative-words.txt'), 'r', encoding='latin-1') as file:\n",
    "        negative_words.update(file.read().splitlines())\n",
    "    return positive_words, negative_words\n",
    "\n",
    "# Function to clean text using stop words\n",
    "def clean_text(text, stop_words):\n",
    "    tokens = word_tokenize(text.lower())\n",
    "    cleaned_tokens = [token for token in tokens if token not in stop_words and token.isalpha()]\n",
    "    return cleaned_tokens\n",
    "\n",
    "# Function to perform text analysis and compute variables\n",
    "def analyze_text(text, positive_words, negative_words):\n",
    "    positive_score = sum(1 for word in text if word in positive_words)\n",
    "    negative_score = sum(-1 for word in text if word in negative_words)\n",
    "    polarity_score = (positive_score - negative_score) / ((positive_score + negative_score) + 0.000001)\n",
    "    subjectivity_score = (positive_score + negative_score) / (len(text) + 0.000001)\n",
    "    return positive_score, negative_score, polarity_score, subjectivity_score\n",
    "\n",
    "# Read stop words\n",
    "stop_words = read_stop_words(stop_words_dir)\n",
    "\n",
    "# Read positive and negative\n",
    "# Read positive and negative words\n",
    "positive_words, negative_words = read_master_dict(master_dict_dir)\n",
    "\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "\n",
    "output_data = []\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            cleaned_text = clean_text(text, stop_words)\n",
    "            positive_score, negative_score, polarity_score, subjectivity_score = analyze_text(cleaned_text, positive_words, negative_words)\n",
    "            output_data.append([filename[:-4], positive_score, negative_score, polarity_score, subjectivity_score])\n",
    "\n",
    "# Write output to CSV file\n",
    "with open(output_file_path, 'w', encoding='utf-8') as csv_file:\n",
    "    csv_file.write(\"URL_ID,POSITIVE SCORE,NEGATIVE SCORE,POLARITY SCORE,SUBJECTIVITY SCORE\\n\")\n",
    "    for row in output_data:\n",
    "        csv_file.write(','.join(map(str, row)) + '\\n')\n",
    "\n",
    "print(\"Text analysis complete. Output saved to\", output_file_path)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "05f1a8da",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import pandas as pd\n",
    "import nltk\n",
    "from nltk.tokenize import word_tokenize\n",
    "from collections import defaultdict\n",
    "\n",
    "# Set the path to stop words and master dictionary directories\n",
    "stop_words_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\StopWords-20240311T041135Z-001\\StopWords'\n",
    "master_dict_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\MasterDictionary-20240311T041108Z-001\\MasterDictionary'\n",
    "\n",
    "# Function to read stop words from files\n",
    "def read_stop_words(directory):\n",
    "    stop_words = set()\n",
    "    for filename in os.listdir(directory):\n",
    "        with open(os.path.join(directory, filename), 'r', encoding='latin-1') as file:\n",
    "            stop_words.update(file.read().splitlines())\n",
    "    return stop_words\n",
    "\n",
    "# Function to read positive and negative words from files\n",
    "def read_master_dict(directory):\n",
    "    positive_words = set()\n",
    "    negative_words = set()\n",
    "    with open(os.path.join(directory, 'positive-words.txt'), 'r', encoding='latin-1') as file:\n",
    "        positive_words.update(file.read().splitlines())\n",
    "    with open(os.path.join(directory, 'negative-words.txt'), 'r', encoding='latin-1') as file:\n",
    "        negative_words.update(file.read().splitlines())\n",
    "    return positive_words, negative_words\n",
    "\n",
    "# Function to clean text using stop words\n",
    "def clean_text(text, stop_words):\n",
    "    tokens = word_tokenize(text.lower())\n",
    "    cleaned_tokens = [token for token in tokens if token not in stop_words and token.isalpha()]\n",
    "    return cleaned_tokens\n",
    "\n",
    "# Function to perform text analysis and compute variables\n",
    "def analyze_text(text, positive_words, negative_words):\n",
    "    positive_score = sum(1 for word in text if word in positive_words)\n",
    "    negative_score = sum(-1 for word in text if word in negative_words)\n",
    "    polarity_score = (positive_score - negative_score) / ((positive_score + negative_score) + 0.000001)\n",
    "    subjectivity_score = (positive_score + negative_score) / (len(text) + 0.000001)\n",
    "    return positive_score, negative_score, polarity_score, subjectivity_score\n",
    "\n",
    "# Read stop words\n",
    "stop_words = read_stop_words(stop_words_dir)\n",
    "\n",
    "# Read positive and negative words\n",
    "positive_words, negative_words = read_master_dict(master_dict_dir)\n",
    "\n",
    "# Read input Excel file\n",
    "input_excel_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\Input.xlsx'\n",
    "input_data = pd.read_excel(input_excel_path)\n",
    "\n",
    "# Iterate over input data\n",
    "output_data = []\n",
    "for index, row in input_data.iterrows():\n",
    "    url_id = row['URL_ID']\n",
    "    url = row['URL']\n",
    "    text_path = os.path.join(extracted_texts_dir, f\"{url_id}.txt\")\n",
    "    try:\n",
    "        with open(text_path, 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            cleaned_text = clean_text(text, stop_words)\n",
    "            positive_score, negative_score, polarity_score, subjectivity_score = analyze_text(cleaned_text, positive_words, negative_words)\n",
    "            output_data.append([url_id, url, positive_score, negative_score, polarity_score, subjectivity_score])\n",
    "    except FileNotFoundError:\n",
    "        print(f\"File {text_path}  Page not found. Skipping...\")\n",
    "\n",
    "# Write output to CSV file\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "with open(output_file_path, 'w', encoding='utf-8') as csv_file:\n",
    "    csv_file.write(\"URL_ID,URL,POSITIVE SCORE,NEGATIVE SCORE,POLARITY SCORE,SUBJECTIVITY SCORE\\n\")\n",
    "    for row in output_data:\n",
    "        csv_file.write(','.join(map(str, row)) + '\\n')\n",
    "\n",
    "print(\"Text analysis complete. Output saved to\", output_file_path)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d0e84b41",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "from nltk.tokenize import word_tokenize, sent_tokenize\n",
    "from nltk.corpus import cmudict\n",
    "import string\n",
    "\n",
    "# Function to calculate Average Sentence Length\n",
    "def calculate_avg_sentence_length(text):\n",
    "    sentences = sent_tokenize(text)\n",
    "    num_sentences = len(sentences)\n",
    "    words = word_tokenize(text)\n",
    "    num_words = len(words)\n",
    "    return num_words / num_sentences\n",
    "\n",
    "# Function to calculate Percentage of Complex Words\n",
    "def calculate_percentage_complex_words(text):\n",
    "    cmu_dict = cmudict.dict()\n",
    "    words = [word for word in word_tokenize(text.lower()) if word.isalpha()]\n",
    "    complex_words = [word for word in words if len(cmu_dict.get(word, [])) > 2]\n",
    "    return len(complex_words) / len(words)\n",
    "\n",
    "# Function to calculate Fog Index\n",
    "def calculate_fog_index(avg_sentence_length, percentage_complex_words):\n",
    "    return 0.4 * (avg_sentence_length + percentage_complex_words)\n",
    "\n",
    "# Read existing data from output file into DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files and calculate variables\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            avg_sentence_length = calculate_avg_sentence_length(text)\n",
    "            percentage_complex_words = calculate_percentage_complex_words(text)\n",
    "            fog_index = calculate_fog_index(avg_sentence_length, percentage_complex_words)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'AVG SENTENCE LENGTH'] = avg_sentence_length\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'PERCENTAGE OF COMPLEX WORDS'] = percentage_complex_words\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'FOG INDEX'] = fog_index\n",
    "\n",
    "# Write updated DataFrame back to output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "\n",
    "print(\"Analysis of Readability complete. Updated output saved to\", output_file_path)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3e9b561d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import nltk\n",
    "\n",
    "# Function to compute the average number of words per sentence\n",
    "def compute_avg_words_per_sentence(text):\n",
    "    sentences = nltk.sent_tokenize(text)\n",
    "    num_sentences = len(sentences)\n",
    "    words = nltk.word_tokenize(text)\n",
    "    num_words = len(words)\n",
    "    if num_sentences > 0:\n",
    "        avg_words_per_sentence = num_words / num_sentences\n",
    "    else:\n",
    "        avg_words_per_sentence = 0\n",
    "    return avg_words_per_sentence\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            avg_words_per_sentence = compute_avg_words_per_sentence(text)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'AVG NUMBER OF WORDS PER SENTENCE'] = avg_words_per_sentence\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13c11232",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import nltk\n",
    "from nltk.corpus import cmudict\n",
    "\n",
    "# Function to compute the complex word count\n",
    "def compute_complex_word_count(text):\n",
    "    words = nltk.word_tokenize(text.lower())\n",
    "    cmu_dict = cmudict.dict()\n",
    "    complex_word_count = sum(1 for word in words if len(cmu_dict.get(word, [])) > 2)\n",
    "    return complex_word_count\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            complex_word_count = compute_complex_word_count(text)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'COMPLEX WORD COUNT'] = complex_word_count\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7c89b9fe",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import nltk\n",
    "\n",
    "# Function to compute the word count\n",
    "def compute_word_count(text):\n",
    "    tokens = nltk.word_tokenize(text.lower())\n",
    "    cleaned_tokens = [token for token in tokens if token.isalpha()]\n",
    "    word_count = len(cleaned_tokens)\n",
    "    return word_count\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            word_count = compute_word_count(text)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'WORD COUNT'] = word_count\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "ec7bd7cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import nltk\n",
    "\n",
    "# Function to compute the syllable count per word\n",
    "def compute_syllable_count(text):\n",
    "    tokens = nltk.word_tokenize(text.lower())\n",
    "    syllable_count = sum(len([v for v in token if v in 'aeiou']) for token in tokens)\n",
    "    return syllable_count\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            syllable_count = compute_syllable_count(text)\n",
    "            word_count = len(nltk.word_tokenize(text.lower()))\n",
    "            syllable_count_ratio = syllable_count / word_count if word_count > 0 else 0\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'SYLLABLE COUNT PER WORD'] = syllable_count_ratio\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "19250447",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import re\n",
    "\n",
    "# Function to compute total count of personal pronouns\n",
    "def compute_total_personal_pronouns(text):\n",
    "    pronouns = {\"I\", \"we\", \"my\", \"ours\", \"us\"}\n",
    "    total_count = sum(len(re.findall(r'\\b{}\\b'.format(pronoun), text, flags=re.IGNORECASE)) for pronoun in pronouns)\n",
    "    return total_count\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            total_count = compute_total_personal_pronouns(text)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'TOTAL_PERSONAL_PRONOUNS'] = total_count\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "03af3e16",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "text analysis completed\n"
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "import os\n",
    "import pandas as pd\n",
    "\n",
    "# Function to compute the average word length\n",
    "def compute_average_word_length(text):\n",
    "    tokens = nltk.word_tokenize(text.lower())\n",
    "    total_characters = sum(len(word) for word in tokens)\n",
    "    total_words = len(tokens)\n",
    "    if total_words != 0:\n",
    "        average_word_length = total_characters / total_words\n",
    "    else:\n",
    "        average_word_length = 0\n",
    "    return average_word_length\n",
    "\n",
    "# Read existing output file into a DataFrame\n",
    "output_file_path = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\output.csv'\n",
    "output_df = pd.read_csv(output_file_path)\n",
    "\n",
    "# Iterate over extracted text files\n",
    "extracted_texts_dir = r'E:\\OneDrive\\Desktop\\interview prepration\\blackoffers\\extracted_texts'\n",
    "\n",
    "for filename in os.listdir(extracted_texts_dir):\n",
    "    if filename.endswith('.txt'):\n",
    "        with open(os.path.join(extracted_texts_dir, filename), 'r', encoding='utf-8') as file:\n",
    "            text = file.read()\n",
    "            average_word_length = compute_average_word_length(text)\n",
    "            output_df.loc[output_df['URL_ID'] == filename[:-4], 'AVG WORD LENGTH'] = average_word_length\n",
    "\n",
    "# Write updated DataFrame back to the output file\n",
    "output_df.to_csv(output_file_path, index=False)\n",
    "print(\"text analysis completed\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6fcfeade",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
